#!/bin/sh

all_pkgs() {
    grep -o '^\s*\[.*\.info\]' pkgs.ini | sed -e 's/^\s*\[//' -e 's/\.info\]$//'
}

ini_section() {
    section=$1
    awk "/^\[.*\]$/ {print_it=0} /^\[$section\]$/ {print_it=1} print_it"
}

ini_field() {
    field=$1
    grep "${field} = " | cut -d ' ' -f3-
}

check_pkg() {
    pkg=$1

    pkg_section=$(ini_section "$pkg\.info" <pkgs.ini)
    update_section=$(ini_section "$pkg\.update" <pkgs.ini)

    version=$(echo "$pkg_section" | ini_field 'version')
    new_version=''

    github_repo=$(echo "$update_section" | ini_field 'github')
    if [ -n "$github_repo" ]; then
        extract_version_regex='[0-9]+\.[0-9]+(\.[0-9]+)?(\.[0-9]+)?'
        find_version_regex="/($pkg)?-?v?$extract_version_regex</id>"
        content=$(curl -s "https://github.com/$github_repo/releases.atom")
        new_version=$(echo "$content" |
            grep -m1 -Eo "$find_version_regex" |
            grep -m1 -Eo "$extract_version_regex")

        if [ -z "$new_version" ]; then
            echo "error: could not find version for '$pkg' in" >&2
            return 1
        fi
    else
        echo "error: cannot check '$pkg' for updates" >&2
        return 1
    fi

    if [ "$version" != "$new_version" ]; then
        echo "$pkg $version -> $new_version" >&2
    fi
}

check_all() {
    all_pkgs | sort -R | while read -r pkg; do
        check_pkg "$pkg"
        sleep 1s # Rate limit
    done
}

case $1 in
    '') check_all ;;
    *) check_pkg "$1" ;;
esac
